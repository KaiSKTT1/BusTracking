import DriverModel from "../models/driverModel.js";

const DriverController = {
    // üîπ GET all
    getAllDrivers: async (req, res) => {
        try {
            const drivers = await DriverModel.getAll();
            return res.status(200).json({ message: "ok", data: drivers });
        } catch (err) {
            return res.status(500).json({ message: err.message });
        }
    },

    // üîπ GET by ID
    getDriverById: async (req, res) => {
        try {
            const { id } = req.params;
            const driver = await DriverModel.getById(id);

            if (!driver)
                return res.status(404).json({ message: "Driver not found" });

            return res.status(200).json({ message: "ok", data: driver });
        } catch (err) {
            return res.status(500).json({ message: err.message });
        }
    },

    // üîπ CREATE (t·∫°o t√†i x·∫ø m·ªõi)
    createDriver: async (req, res) => {
        const { username, email, password, status = "active" } = req.body;

        if (!username || !email || !password) {
            return res.status(400).json({
                message: "Missing required fields: username, email, password",
            });
        }

        try {
            const existing = await DriverModel.findByEmail(email);
            if (existing.length > 0)
                return res.status(400).json({ message: "Email already exists" });

            const id = await DriverModel.create(username, email, password, status);
            return res
                .status(201)
                .json({ message: "Driver created successfully", data: { id } });
        } catch (err) {
            console.error("‚ùå Error creating driver:", err);
            return res.status(500).json({ message: err.message });
        }
    },

    // üîπ UPDATE (ch·ªânh s·ª≠a th√¥ng tin t√†i x·∫ø)
    updateDriver: async (req, res) => {
        const { id } = req.params;
        const { username, email, password, status = "active" } = req.body;

        if (!username || !email) {
            return res.status(400).json({
                message: "Missing required fields: username, email",
            });
        }

        try {
            if (!(await DriverModel.exists(id))) {
                return res.status(404).json({ message: "Driver not found" });
            }

            const existing = await DriverModel.findByEmail(email, id);
            if (existing.length > 0)
                return res.status(400).json({ message: "Email already exists" });

            await DriverModel.update(id, username, email, password, status);
            return res.status(200).json({ message: "Driver updated successfully" });
        } catch (err) {
            console.error("‚ùå Error updating driver:", err);
            return res.status(500).json({ message: err.message });
        }
    },

    // üîπ DELETE
    deleteDriver: async (req, res) => {
        const { id } = req.params;

        try {
            if (!(await DriverModel.exists(id))) {
                return res.status(404).json({ message: "Driver not found" });
            }

            if (await DriverModel.hasBuses(id)) {
                return res.status(400).json({
                    message: "Cannot delete driver with assigned buses",
                });
            }

            await DriverModel.delete(id);
            return res.status(200).json({ message: "Driver deleted successfully" });
        } catch (err) {
            return res.status(500).json({ message: err.message });
        }
    },
    // üîπ T√†i x·∫ø x√°c nh·∫≠n ƒë√£ ƒë√≥n h·ªçc sinh
    // üîπ 1Ô∏è‚É£ T√†i x·∫ø b√°o ƒë√£ ƒë√≥n h·ªçc sinh
    sendPickedUpNotification: async (req, res) => {
        try {
            const { driver_id, student_id, bus_id } = req.body;

            if (!driver_id || !student_id || !bus_id) {
                return res.status(400).json({ message: "Missing required fields" });
            }

            const message = `T√†i x·∫ø ƒë√£ ƒë√≥n h·ªçc sinh ID ${student_id}.`;
            const notifId = await DriverModel.sendNotification({
                sender_id: driver_id,
                student_id,
                bus_id,
                message,
                type: "picked_up",
            });

            if (!notifId) {
                return res.status(200).json({
                    message: "already_picked_up_today",
                    detail: "H·ªçc sinh n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√≥n h√¥m nay.",
                });
            }

            return res.status(201).json({
                message: "success",
                detail: "ƒê√£ g·ª≠i th√¥ng b√°o h·ªçc sinh ƒë√£ ƒë∆∞·ª£c ƒë√≥n",
                notification_id: notifId,
            });
        } catch (err) {
            return res.status(500).json({ message: err.message });
        }
    },

    // üîπ 2Ô∏è‚É£ T√†i x·∫ø b√°o ch∆∞a ƒë√≥n ƒë∆∞·ª£c h·ªçc sinh
    sendNotPickedUpNotification: async (req, res) => {
        try {
            const { driver_id, student_id, bus_id, reason } = req.body;

            if (!driver_id || !student_id || !bus_id || !reason) {
                return res.status(400).json({ message: "Missing required fields" });
            }

            const message = `Kh√¥ng th·ªÉ ƒë√≥n h·ªçc sinh ID ${student_id}. L√Ω do: ${reason}`;
            const notifId = await DriverModel.sendNotification({
                sender_id: driver_id,
                student_id,
                bus_id,
                message,
                type: "not_picked_up",
            });

            if (!notifId) {
                return res.status(200).json({
                    message: "already_not_picked_up_today",
                    detail: "ƒê√£ g·ª≠i th√¥ng b√°o kh√¥ng ƒë√≥n ƒë∆∞·ª£c h·ªçc sinh n√†y h√¥m nay.",
                });
            }

            return res.status(201).json({
                message: "success",
                detail: "ƒê√£ g·ª≠i th√¥ng b√°o ch∆∞a ƒë√≥n ƒë∆∞·ª£c h·ªçc sinh",
                notification_id: notifId,
            });
        } catch (err) {
            return res.status(500).json({ message: err.message });
        }
    },

    // üîπ 3Ô∏è‚É£ T√†i x·∫ø b√°o s·ª± c·ªë
    sendIncidentNotification: async (req, res) => {
        try {
            const { driver_id, bus_id, message } = req.body;

            if (!driver_id || !bus_id || !message) {
                return res.status(400).json({ message: "Missing required fields" });
            }

            const notifId = await DriverModel.sendNotification({
                sender_id: driver_id,
                bus_id,
                message,
                type: "incident",
            });

            return res.status(201).json({
                message: "success",
                detail: "ƒê√£ g·ª≠i th√¥ng b√°o s·ª± c·ªë",
                notification_id: notifId,
            });
        } catch (err) {
            return res.status(500).json({ message: err.message });
        }
    },

};

export default DriverController;
