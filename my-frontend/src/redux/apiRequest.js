import axios from "axios";
import { loginFail, loginStart, loginSuccess, logout } from "./authSlice";

export const loginUser = async (user, dispatch, navigate) => {
    dispatch(loginStart());
    try {
        const res = await axios.post("http://localhost:8080/auth/login", user);

        if (res.data.accessToken) {
            dispatch(loginSuccess(res.data));
            localStorage.setItem("accessToken", res.data.accessToken);
            localStorage.setItem("user", JSON.stringify(res.data.user));

            const roleId = res.data.role_id || res.data.user?.role_id;

            switch (roleId) {
                case 1:
                    navigate("/admin/dashboard");
                    break;
                case 2:
                    navigate("/driver/pickupdropoff");
                    break;
                case 3:
                    navigate("/parent/dashboard");
                    break;
                default:
                    navigate("/");
                    break;
            }
        } else {
            dispatch(loginFail());
            alert(res.data.error || "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!");
        }
    } catch (err) {
        console.error(err);
        dispatch(loginFail());

        if (err.response) {
            alert(err.response.data.error || "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!");
        } else if (err.request) {
            alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i!");
        } else {
            alert("ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh!");
        }
    }
};

// ‚úÖ H√†m logout
export const logoutUser = (dispatch, navigate) => {
    // X√≥a token
    localStorage.removeItem("accessToken");
    localStorage.removeItem("user");
    // Reset Redux state
    dispatch(logout());
    // Chuy·ªÉn h∆∞·ªõng v·ªÅ login
    navigate("/");
};

export const getUserById = async (id) => {
    try {
        const token = localStorage.getItem("accessToken");
        const res = await axios.get(`http://localhost:8080/drivers/${id}`, {
            headers: { Authorization: `Bearer ${token}` },
        });

        // ‚úÖ API tr·∫£ v·ªÅ { message, data } ‚Üí ch·ªâ l·∫•y ph·∫ßn data
        return res.data.data;
    } catch (err) {
        console.error("üö´ L·ªói khi g·ªçi getUserById:", err);
        return null;
    }
};

export const updateUserById = async (id, data) => {
    try {
        const token = localStorage.getItem("accessToken");

        console.log("üì§ G·ª≠i PUT:", id, data); // ‚úÖ Debug d·ªØ li·ªáu g·ª≠i ƒëi

        const res = await axios.put(`http://localhost:8080/drivers/${id}`, data, {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            },
        });

        console.log("üì• Ph·∫£n h·ªìi backend:", res.data); // ‚úÖ Xem ph·∫£n h·ªìi

        return res.data;
    } catch (err) {
        if (err.response) {
            console.error("‚ùå Backend tr·∫£ l·ªói:", err.response.status, err.response.data);
        } else if (err.request) {
            console.error("‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server:", err.request);
        } else {
            console.error("üö´ L·ªói kh√¥ng x√°c ƒë·ªãnh:", err.message);
        }
        return null;
    }
};
// üü¢ 1Ô∏è‚É£ ƒê√≥n h·ªçc sinh
export const notifyPickedUp = async (driver_id, student_id, bus_id) => {
    try {
        const token = localStorage.getItem("accessToken");
        const res = await axios.post(
            `http://localhost:8080/drivers/notify/picked-up`,
            { driver_id, student_id, bus_id },
            { headers: { Authorization: `Bearer ${token}` } }
        );
        console.log("‚úÖ notifyPickedUp:", res.data);
        return res.data;
    } catch (err) {
        console.error("‚ùå notifyPickedUp error:", err.response?.data || err.message);
        return null;
    }
};

// üü† 2Ô∏è‚É£ Kh√¥ng ƒë√≥n ƒë∆∞·ª£c h·ªçc sinh
export const notifyNotPickedUp = async (driver_id, student_id, bus_id, reason) => {
    try {
        const token = localStorage.getItem("accessToken");
        const res = await axios.post(
            `http://localhost:8080/drivers/notify/not-picked-up`,
            { driver_id, student_id, bus_id, reason },
            { headers: { Authorization: `Bearer ${token}` } }
        );
        console.log("‚úÖ notifyNotPickedUp:", res.data);
        return res.data;
    } catch (err) {
        console.error("‚ùå notifyNotPickedUp error:", err.response?.data || err.message);
        return null;
    }
};

// üî¥ 3Ô∏è‚É£ B√°o s·ª± c·ªë
export const notifyIncident = async (driver_id, bus_id, message) => {
    try {
        const token = localStorage.getItem("accessToken");
        const res = await axios.post(
            `http://localhost:8080/drivers/notify/incident`,
            { driver_id, bus_id, message },
            { headers: { Authorization: `Bearer ${token}` } }
        );
        console.log("‚úÖ notifyIncident:", res.data);
        return res.data;
    } catch (err) {
        console.error("‚ùå notifyIncident error:", err.response?.data || err.message);
        return null;
    }
};


